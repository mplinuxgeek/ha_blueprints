blueprint:
  name: Managed Climate
  description: |
    ## Managed Climate

    This blueprint offers an automated solution to manage an air conditioning system based on the current temperature, the season, and the temperature's rate of change. It is designed to provide optimal comfort while also being energy efficient.

  domain: automation
  input:
    climate_entity:
      name: Climate Entity
      selector:
        entity:
          domain: climate
    temperature_sensor_or_entity:
      name: Temperature Sensor or Entity Attribute
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temperature_attribute:
      name: Temperature Attribute (Optional)
      description: Attribute of the entity if using an entity's attribute for temperature.
      default: ""
      selector:
        text: {}
    temperature_override:
      name: Temperature Override
      description: (Optional) Helper to override the set temperature.
      selector:
        entity:
          domain: input_number
      default: ""
    derivative_sensor:
      name: Derivative Sensor
      selector:
        entity:
          domain: sensor
      default: ""
    set_temperature:
      name: Set Temperature
      default: 20
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C
    summer_on_temp:
      name: Summer On Temperature
      default: 23
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
          unit_of_measurement: °C
    winter_on_temp:
      name: Winter On Temperature
      default: 16
      selector:
        number:
          min: 0
          max: 25
          step: 0.5
          unit_of_measurement: °C
    derivative_threshold:
      name: Derivative Threshold
      default: 0.5
      selector:
        number:
          min: 0
          max: 2
          step: 0.1
          unit_of_measurement: °C
    hysteresis:
      name: Hysteresis
      default: 1
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.1
          unit_of_measurement: °C
    low_scale_temp:
      name: Low Scale Temperature
      default: 20
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: °C
    high_scale_temp:
      name: High Scale Temperature
      default: 24
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
    swing_mode:
      name: Swing Mode
      default: '3D'
      selector:
        select:
          options:
            - 'Off'
            - 'Vertical'
            - 'Horizontal'
            - '3D'
    delay:
      name: Delay
      default: 4
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: seconds

trigger:
  - platform: time_pattern
    minutes: /10

action:
  - variables:
      climate_entity: !input climate_entity
      temperature_sensor_or_entity: !input temperature_sensor_or_entity
      temperature_attribute: !input temperature_attribute
      derivative_sensor: !input derivative_sensor
      derivative_threshold: !input derivative_threshold
      summer_on_temp: !input summer_on_temp
      winter_on_temp: !input winter_on_temp
      low_scale_temp: !input low_scale_temp
      high_scale_temp: !input high_scale_temp
      hysteresis: !input hysteresis
      swing_mode: !input swing_mode
      current_hvac_mode: "{{ states(climate_entity) }}"
      current_temp: >
        {% if temperature_attribute != "" %}
          {{ state_attr(temperature_sensor_or_entity, temperature_attribute) | float }}
        {% else %}
          {{ states(temperature_sensor_or_entity) | float }}
        {% endif %}
      current_season: "{{ states('season.season') }}"
      current_derivative: "{{ states(derivative_sensor) | float(default=0) }}"
      set_temperature: >
        {% if states(!input temperature_override) != 'unknown' and states(!input temperature_override) != 'none' %}
          {{ states(!input temperature_override) | float }}
        {% else %}
          {{ !input set_temperature }}
        {% endif %}
      hvac_mode: >
        {% if current_temp < winter_on_temp and current_season in ['winter', 'autumn'] %}
          heat
        {% elif current_temp > summer_on_temp %}
          cool
        {% elif current_temp > set_temperature + hysteresis %}
          cool
        {% elif current_temp >= set_temperature - hysteresis and current_hvac_mode != 'off' %}
          {% if current_derivative > derivative_threshold %}
            cool
          {% else %}
            fan_only
          {% endif %}
        {% else %}
          off
        {% endif %}
      fan_mode: >
        {% if hvac_mode == 'cool' %}
          {% if current_temp < set_temperature + hysteresis %}
            'Silence'
          {% elif current_temp >= set_temperature + hysteresis %}
            {% set base_mapped_value = ((current_temp - low_scale_temp) * (5 - 1) / (high_scale_temp - low_scale_temp)) | round %}
            {% set base_mapped_value = [base_mapped_value, 5] | min %}
            {% set base_mapped_value = [base_mapped_value, 1] | max %}
            {% if current_derivative > derivative_threshold %}
              {% set fan_speed = [base_mapped_value + 1, 5] | min %}
            {% else %}
              {% set fan_speed = base_mapped_value %}
            {% endif %}
            {{ fan_speed }}
          {% endif %}
        {% elif hvac_mode == 'fan_only' %}
          {% if current_temp < set_temperature + hysteresis %}
            'Silence'
          {% else %}
            1
          {% endif %}
        {% else %}
          'Auto'
        {% endif %}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(climate_entity) != hvac_mode }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: "{{ climate_entity }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(climate_entity) != hvac_mode }}"
        sequence:
          - service: climate.set_hvac_mode
            data_template:
              entity_id: "{{ climate_entity }}"
              hvac_mode: "{{ hvac_mode }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ state_attr(climate_entity, 'temperature') != set_temperature }}"
          - condition: template
            value_template: "{{ states(climate_entity) in ['cool', 'heat', 'heat_cool'] }}"
        sequence:
          - service: climate.set_temperature
            data_template:
              entity_id: "{{ climate_entity }}"
              temperature: "{{ set_temperature }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ state_attr(climate_entity, 'fan_mode') != fan_mode }}"
        sequence:
          - service: climate.set_fan_mode
            data_template:
              entity_id: "{{ climate_entity }}"
              fan_mode: "{{ fan_mode }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
        - condition: template
          value_template: "{{ state_attr(climate_entity, 'swing_mode') != swing_mode }}"
        sequence:
          - service: climate.set_swing_mode
            data_template:
              entity_id: "{{ climate_entity }}"
              swing_mode: "{{ swing_mode }}"
