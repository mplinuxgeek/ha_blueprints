blueprint:
  name: Managed Climate
  description: |
    Version: 0.14
    ## Managed Climate

    This blueprint offers an automated solution to manage an air conditioning system based on the current temperature, the season, and the temperature's rate of change. It is designed to provide optimal comfort while also being energy efficient.

    ### Key Features:
      - Seasonal Awareness: The automation adjusts the HVAC mode (heating, cooling, fan only) based on the current season and room temperature. During autumn and winter, it activates heating if the room is colder than 16°C. In other seasons, it cools the room if the temperature rises above a user-defined threshold.
      - Fan Speed Scaling: When in cooling mode, the fan speed is dynamically scaled based on the current room temperature. The scaling operates between two user-defined temperatures: a low scale temperature and a high scale temperature. As the room temperature increases from the low scale to the high scale, the fan speed increments from 1 to 5 accordingly. For instance, a lower room temperature would result in a lower fan speed, gradually increasing as the temperature rises, ensuring efficient cooling and energy usage.
      - Temperature Hysteresis: A hysteresis value prevents frequent switching of the AC unit by providing a buffer around the set temperature. This ensures that minor fluctuations in temperature don't trigger the system, adding to its efficiency and longevity.
      - Swing Mode Control: Users can choose the desired swing mode for their AC unit, providing further comfort customization.
      - Derivative Sensor Integration: By using a derivative sensor, the automation can assess the rate of temperature change, aiding in making more informed decisions about when to activate or deactivate the AC unit.

    ### Usage
    To use this blueprint, select your climate entity, temperature sensor, and optionally a derivative sensor. Define your preferred temperatures for different conditions and choose the appropriate swing mode for your AC unit. The automation will handle the rest, adjusting settings every 10 minutes based on the current conditions.
  domain: automation
  input:
    climate_entity:
      name: Climate Entity
      description: Climate entity to control.
      selector:
        entity:
          domain: climate
    temperature_sensor_or_entity:
      name: Temperature Sensor or Entity Attribute
      description: Sensor or entity attribute to measure room temperature.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temperature_attribute:
      name: Temperature Attribute (Optional)
      description: Attribute of the entity if using an entity's attribute for temperature.
      default: ""
      selector:
        text: {}
    temperature_override_entity_or_sensor:
      name: Temperature Override Entity or Sensor
      description: (Optional) Entity to override the set temperature (climate or sensor entity).
      selector:
        entity:
          domain:
            - sensor
            - climate
      default: ""
    temperature_override_attribute:
      name: Temperature Override Attribute (Optional)
      description: Attribute of the entity to use for overriding the set temperature.
      default: ""
      selector:
        text: {}
    derivative_sensor:
      name: Derivative Sensor
      description: (Optional) Sensor for measuring temperature change rate.
      selector:
        entity:
          domain: sensor
      default: ""
    set_temperature:
      name: Set Temperature
      description: Target temperature for the climate entity.
      default: 20
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C
    summer_on_temp:
      name: Summer On Temperature
      description: Temperature to turn on AC in summer.
      default: 23
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
          unit_of_measurement: °C
    winter_on_temp:
      name: Winter On Temperature
      description: Temperature to turn on AC in winter.
      default: 16
      selector:
        number:
          min: 0
          max: 25
          step: 0.5
          unit_of_measurement: °C
    derivative_threshold:
      name: Derivative Threshold
      description: Derivative boost value, fan speed will be +1 above this value.
      default: 0.5
      selector:
        number:
          min: 0
          max: 2
          step: 0.1
          unit_of_measurement: °C
    hysteresis:
      name: Hysteresis
      description: Temperature buffer for stability (°C).
      default: 1
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.1
          unit_of_measurement: °C
    low_scale_temp:
      name: Low Scale Temperature
      description: Lower bound for scaling fan mode.
      default: 20
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: °C
    high_scale_temp:
      name: High Scale Temperature
      description: Upper bound for scaling fan mode.
      default: 24
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
    swing_mode:
      name: Swing Mode
      description: Swing mode for the AC.
      default: '3D'
      selector:
        select:
          options:
            - 'Off'
            - 'Vertical'
            - 'Horizontal'
            - '3D'
    delay:
      name: Delay
      description: Delay between actions (seconds).
      default: 4
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: seconds

trigger:
  - platform: time_pattern
    minutes: /10

action:
  - variables:
      climate_entity: !input climate_entity
      temperature_sensor_or_entity: !input temperature_sensor_or_entity
      temperature_attribute: !input temperature_attribute
      temperature_override_entity_or_sensor: !input temperature_override_entity_or_sensor
      temperature_override_attribute: !input temperature_override_attribute
      derivative_sensor: !input derivative_sensor
      derivative_threshold: !input derivative_threshold
      summer_on_temp: !input summer_on_temp
      winter_on_temp: !input winter_on_temp
      low_scale_temp: !input low_scale_temp
      high_scale_temp: !input high_scale_temp
      hysteresis: !input hysteresis
      swing_mode: !input swing_mode
      current_hvac_mode: "{{ states(climate_entity) }}"
      current_temp: >
        {% if temperature_attribute != "" %}
          {{ state_attr(temperature_sensor_or_entity, temperature_attribute) | float }}
        {% else %}
          {{ states(temperature_sensor_or_entity) | float }}
        {% endif %}
      current_season: "{{ states('season.season') }}"
      current_derivative: "{{ states(derivative_sensor) | float(default=0) }}"
      set_temperature: >
        {% if temperature_override_entity_or_sensor != "" %}
          {% if temperature_override_attribute != "" %}
            {{ state_attr(temperature_override_entity_or_sensor, temperature_override_attribute) | float }}
          {% else %}
            {{ states(temperature_override_entity_or_sensor) | float }}
          {% endif %}
        {% else %}
          {{ set_temperature_input }}
        {% endif %}
      hvac_mode: >
        {% if current_temp < winter_on_temp and current_season in ['winter', 'autumn'] %}
          heat
        {% elif current_temp > summer_on_temp %}
          cool
        {% elif current_temp > set_temperature + hysteresis %}
          cool
        {% elif current_temp >= set_temperature - hysteresis and current_hvac_mode != 'off' %}
          {% if current_derivative > derivative_threshold %}
            cool
          {% else %}
            fan_only
          {% endif %}
        {% else %}
          off
        {% endif %}
      fan_mode: >
        {% if hvac_mode == 'cool' %}
          {% if current_temp < set_temperature + hysteresis %}
            'Silence'
          {% elif current_temp >= set_temperature + hysteresis %}
            {% set base_mapped_value = ((current_temp - low_scale_temp) * (5 - 1) / (high_scale_temp - low_scale_temp)) | round %}
            {% set base_mapped_value = [base_mapped_value, 5] | min %}
            {% set base_mapped_value = [base_mapped_value, 1] | max %}
            {% if current_derivative > derivative_threshold %}
              {% set fan_speed = [base_mapped_value + 1, 5] | min %}
            {% else %}
              {% set fan_speed = base_mapped_value %}
            {% endif %}
            {{ fan_speed }}
          {% endif %}
        {% elif hvac_mode == 'fan_only' %}
          {% if current_temp < set_temperature + hysteresis %}
            'Silence'
          {% else %}
            1
          {% endif %}
        {% else %}
          Auto
        {% endif %}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(climate_entity) != hvac_mode }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: "{{ climate_entity }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(climate_entity) != hvac_mode }}"
        sequence:
          - service: climate.set_hvac_mode
            data_template:
              entity_id: "{{ climate_entity }}"
              hvac_mode: "{{ hvac_mode }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ state_attr(climate_entity, 'temperature') != set_temperature }}"
          - condition: template
            value_template: "{{ states(climate_entity) in ['cool', 'heat', 'heat_cool'] }}"
        sequence:
          - service: climate.set_temperature
            data_template:
              entity_id: "{{ climate_entity }}"
              temperature: "{{ set_temperature }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ state_attr(climate_entity, 'fan_mode') != fan_mode }}"
        sequence:
          - service: climate.set_fan_mode
            data_template:
              entity_id: "{{ climate_entity }}"
              fan_mode: "{{ fan_mode }}"
          - delay: "00:00:04"
  - choose:
      - conditions:
        - condition: template
          value_template: "{{ state_attr(climate_entity, 'swing_mode') != swing_mode }}"
        sequence:
          - service: climate.set_swing_mode
            data_template:
              entity_id: "{{ climate_entity }}"
              swing_mode: "{{ swing_mode }}"
